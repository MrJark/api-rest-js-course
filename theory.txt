Qué es un API Rest?
API de RESTful es una interfaz de programación de aplicaciones (API o API web) que se ajusta a los límites de la arquitectura REST y permite la interacción con los servicios web de RESTful. El informático Roy Fielding es el creador de la transferencia de estado representacional (REST).
Básicamente es la conexión o comunicación entre el usuario, el frontend y el backend
API Rest != servidor 

Url de la API: https://documenter.getpostman.com/view/5578104/RWgqUxxh#intro

Headers en un API, qué son?

El las APIs, el body es la información que le vamos a comunicar al backend, no solo la que le vamos a enseñar a los usuarios.
Los headers nos ayudan a decirle al backend que tipo de información le estamos enviando y cómo debe devolvernos la respuesta
    Url tipos de headers: 
        https://apipheny.io/api-headers/
        https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers
        
    Url de la introducción a los comandos de la API
        https://developers.themoviedb.org/3/getting-started/introduction

Location and Hash Navigation

https://developer.mozilla.org/es/docs/Web/API/Location
https://developer.mozilla.org/es/docs/Web/API/WindowEventHandlers/onhashchange

---

He copiado gran parte del código del ejemplo de Juan DC de Platzi para hacer el curso de api rest practico donde cogemos el api de 'the movie db'
El código está aquí: https://github.com/platzi/curso-api-rest-javascript-practico/tree/5e56d4c09b3eaa8322ce01814ade000aa28a92ed

---

Loading Spinners vs Loading Animations vs Loading Skeletons

 - El spinner es la típica rueda que da vueltas pero que no te dice nada en sí. no te da datos que cuanto falta, que está cargando... 

 - El animation, es la barra de carga que puede tener algún juego donde te pone una barrita, con el porcentaje que lleva cargado y para juegos está bien, se puede saber la cantidad de ____ que llevas de carga pero para una web...

 - Para las webs o apps existe el skeleton, es lo que hace youtube por ejemplo, es la carga, en elementos grises como las cajas, de donde van los elementos. Es la "previsualización" del html y que muestra en cuanto catga un elemento, ese elemento aunque los demás aun estén cargando, esto da la sensación de que hay algo cargando y que poco a poco va cargando más

---

Post para ver como hacer el loading skeleton
https://uxdesign.cc/using-css-design-a-simple-skeleton-loader-57d884cd3547

---

Para la implementación el infinito scroll debes tener en cuenta: 

    1- document.documentElement.clientHeight: Devuelve el alto de la pantalla del usuario, la altura VISIBLE TOTAL del elemento documentElement en pixeles incluyendo el padding del elemento pero no el border, ni el margin del elemento ni la barra de dezplazamiento horizontal del navegador.

    Como clientHeight NO devuelve la altura total de un elemento sino la altura visible del elemento, entonces si el tamaño de pantalla del dispositivo se reduce o si el tamaño de la ventana del navegador se reduce entonces la altura visible del elemento tambien se reducira por lo tanto el valor de .clientHeight se reducira y visceversa.

    2- document.documentElement.scrollTop: Devuelve el numero de pixeles desplazados al hacer scroll vertical en el elemento documentElement, cuanto te has desplazado en ese momento. Si no se ha desplazado nada, está en el top, ese scroll es 0

    TENER EN CUENTA QUE SI EL TAMAÑO DE PANTALLA DEL DISPOSITIVO SE REDUCE O SI EL TAMAÑO DE LA VENTANA DEL NAVEGADOR SE REDUCE ENTONCES EL VALOR DE clientHeight SE REDUCIRA Y EL VALOR MAXIMO DE scrollTop AUMENTARA YA QUE AL REDUCIRSE LA VENTANA TOCA HACER MAS SCROLL PARA RECORRER EL ELEMENTO documentElement. SI EL TAMAÑO DE LA VENTANA DEL NAVEGADOR AUMENTA ENTONCES OCURRE LO CONTRARIO

    3- document.documentElement.scrollHeight: es cuanto scroll podemos hacer en el dispositivo. Devuelve la altura total del elemento documentElement en pixeles incluyendo el padding del elemento pero no el border, ni el margin del elemento ni la barra de dezplazamiento horizontal del navegador.

    Si analizamos nos damos cuenta que la altura total del elemento documentElement es igual a la altura visible de dicho elemento mas el maximo de pixeles desplazados al hacer scroll vertical en dicho elemento, osea, 
    documentElement.scrollHeight = documentElement.clientHeight + documentElement.scrollTop - 15px cuando el valor de scrollTop es el maximo
    Es decir:
        scrollHeight = clientHeight + scrollTop - 15
    Estos 15 px que se le restan es proque a veces los navegadores no 'pueden' bajar hasta el bottom total

    Por tanto, para que se de la pagination la validación que tienees que hacer es:

        scrollHeight >= clientHeight + scrollTop - 15

---

Local Storage vs. API Real

    LocalStorage:

        - Mas rápido
        - Depende del navegador
        - Independiente del API
        - Control completo del frontend
        - No requieren autentication (podría ser malo)
        - No permite compartir o recuperar sesion
        - NO recomendable para datos privados

    API: 

        - Más lento
        - No hay control completo del backend
        - Requiere autentication
        - Permite compartir o recuperar sesión 
        - Para datos privados
    
